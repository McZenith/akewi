---
description: Akewi Project Development Rules
globs:
alwaysApply: true
---

# Akewi Project Development Rules

Welcome to the Akewi project rules. This document provides an overview of the development standards and guidelines for the Akewi application.

## Project Overview

Akewi is a React Native mobile application built with Expo and TypeScript. It is designed to allow users to discover, listen to, and share "Oriki" (Yoruba praise poetry) content.

## Key Technologies

- **React Native**: Core framework
- **Expo**: Development platform
- **TypeScript**: Programming language
- **Redux Toolkit**: State management
- **Expo Router**: Navigation
- **i18n**: Internationalization (English and Yoruba)

## Rule Categories

The project follows these rule sets:

1. **Coding Standards** - General coding conventions and TypeScript usage
2. **Project Structure** - Directory organization and file naming
3. **Component Development** - Guidelines for creating components
4. **Animation Guidelines** - Standards for implementing animations
5. **Localization Standards** - Guidelines for multilingual support
6. **State Management** - Redux and local state management patterns
7. **Theme Usage** - Design system implementation
8. **API Integration** - Backend integration patterns
9. **Expo Best Practices** - Optimizing Expo usage
10. **Testing Guidelines** - Unit, component, and integration testing

## Architecture

The application follows Clean Architecture with MVVM pattern:

1. **Presentation Layer (UI/View)**: React components, screens, UI logic
2. **Presentation Logic (ViewModel)**: Redux slices, React hooks, UI state
3. **Domain Layer**: Business logic, use cases, entities
4. **Data Layer**: Repository implementations, API clients, storage

## Quick References

### Component Structure

```tsx
import { View, StyleSheet } from 'react-native';
import { Text } from '../base/Text';

interface ButtonProps {
  label: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
}

export const Button = ({ label, onPress, variant = 'primary' }: ButtonProps) => {
  return (
    <View style={[styles.container, styles[variant]]}>
      <Text>{label}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    // styles
  },
  primary: {
    // styles
  },
  secondary: {
    // styles
  },
  outline: {
    // styles
  },
});
```

### Redux Slice Pattern

```typescript
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';

export const fetchUserProfile = createAsyncThunk(
  'user/fetchProfile',
  async (userId: string, { rejectWithValue }) => {
    try {
      return await userRepository.getUserProfile(userId);
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    // Reducers
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserProfile.pending, (state) => {
        state.loading.profile = true;
      })
      .addCase(fetchUserProfile.fulfilled, (state, action) => {
        state.loading.profile = false;
        state.profile = action.payload;
      });
  }
});
```

### Theme Usage

```tsx
import { theme } from '../../constants/theme';

const styles = StyleSheet.create({
  container: {
    backgroundColor: theme.colors.background,
    padding: theme.spacing.md,
    borderRadius: theme.borderRadius.md,
  },
  title: {
    fontSize: theme.typography.fontSizes.xl,
    fontWeight: theme.typography.fontWeights.bold,
    color: theme.colors.grey5,
  },
});
```

### Internationalization

```tsx
import { useTranslation } from '../../hooks/useTranslation';

export const LoginScreen = () => {
  const { t } = useTranslation();
  
  return (
    <View>
      <Text>{t('login.description')}</Text>
      <Input placeholder={t('login.input.placeholder')} />
      <Button label={t('common.continue')} />
    </View>
  );
};
```

## Documentation Resources

Please refer to the `docs/` folder for more detailed documentation:

- `ARCHITECTURE.md` - Detailed application architecture
- `ANIMATIONS.md` - Animation standards and examples
- `COMPONENTS.md` - Component catalog and guidelines
- `LOCALIZATION.md` - Internationalization implementation
- `MOCK_DATA.md` - Mock data structures
- `PLANNING.md` - Project planning documents
- `PROGRESS.md` - Progress tracking
- `SCREENS.md` - Screen implementations
- `THEME.md` - Design system documentation

## Official Documentation

- **Expo**: [https://docs.expo.dev/](https://docs.expo.dev/)
- **React Native**: [https://reactnative.dev/docs/getting-started](https://reactnative.dev/docs/getting-started)
- **Redux Toolkit**: [https://redux-toolkit.js.org/introduction/getting-started](https://redux-toolkit.js.org/introduction/getting-started)
- **TypeScript**: [https://www.typescriptlang.org/docs/](https://www.typescriptlang.org/docs/)
- **Expo Router**: [https://docs.expo.dev/routing/introduction/](https://docs.expo.dev/routing/introduction/) 